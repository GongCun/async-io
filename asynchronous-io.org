#+TITLE: I/O 模型与 Libevent
#+AUTHOR: GongCun
* 各种 I/O 模型总结

* 对异步 I/O 的简单介绍
同步 I/O 是非常常见的, 当我们调用一个 I/O 操作, 并直到其完成或超时才返回, 则称之
为同步I/O (synchronous-io). 同步 I/O 並不是原罪：如果你不需要在等待返回的時候做
其他事情的話。但是如果你想要在同步 I/O 中同時處理多個連接，則會產生問題：
#+begin_src c
  /* This won't work */
  char buf[1024];
  int i, n;
  while (i_still_want_to_read()) {
      for (i = 0; i < n_sockets; ++i) {
          n = recv(fd[i], buf, sizeof(buf), 0);
          if (n == 0)
              handle_close(fd[i]);
          else if (n < 0)
              handle_error(fd[i], errno);
          else
              handle_input(fd[i], buf, n);
      }
  }
#+end_src
如果數據在描述符 fd[2] 上到達，而在 fd[0] 和 fd[1] 上沒有能獲得數據并處理完成，
則以上程序將永遠不能從 fd[2] 上讀取。

有些人通過多線程或多進程服務來解決這個問題。最簡單的方式就是通過不同的進程來處理
各個連接，每個進程上都是同步 I/O （blocking I/O）。但這種方式仍然存在問題：首先，
進行的開銷是很大的，可能你會使用一個線程池來作為替代方案，但是線程池的伸縮往往不
盡人意，如果你的程序需要同一時間處理成千上萬條連接，那麼處理的效率並不比每個 CPU
只處理少量的線程更高。

如果線程仍然不是處理多個連接的最佳答案，那麼什麼才是？在 Unix 編程範式中，是通過
非阻塞套接字（nonblocking）：
#+BEGIN_SRC c
  fcntl(fd, F_SETFL, O_NONBLOCK);
#+END_SRC
一旦對套接字指定了 nonblocking, 那麼, 任何時候對套接字進行調用時, 將會完成調用,
或者得到一個錯誤返回, 表示 "I couldn’t make any progress now, try again.", 這樣
我們的 two-socket 例子可以粗略地寫成:
#+BEGIN_SRC c
  /* Bad Example: busy-polling all sockets
   ,* This will work, but the performance will be unforgivably bad. */

  int i, n;
  char buf[1024];
  for (i = 0; i < n_sockets; ++i)
      fcntl(fd[i], F_SETFL, O_NONBLOCK);

  while (i_still_want_to_read()) {
      for (i = 0; i < n_sockets; ++i) {
          n = recv(fd[i], buf, sizeof(buf), 0);
          if (n == 0) {
              handle_close(fd[i]);
          } else if (n < 0) {
              if (errno == EAGAIN)
                  ; /* The kernel didn't have any data for us to read */
              else
                  handle_error(fd[i], errno);
          } else {
              handle_input(fd[i], buf, n);
          }
      }
  }

#+END_SRC
現在我們確實使用了非阻塞 I/O, 而且以上代碼可以工作...但是幾乎一無是處. 由於兩種
原因, 性能將會差得可怕. 第一, 當在每一個連接上都沒有數據可讀時, 循環將無限旋轉,
從而耗盡所有 CPU 週期. 第二, 當你試圖用這種方法去處理一個以上的連接時, 則無論是
否有任何數據, 都將對其進行內核調用. 因此, 我們需要一種方法來告訴內核 "如果某些套
接字準備好給我一些數據, 那麼請告訴我那些已經準備好".

最古老的方式是通過 select() 調用. select() 通過設置三類文件描述符集(通過 bit
arrays 實現): 一個用於讀, 一個用於寫, 以及一個用於例外 (exception). 它等待直到某
個套接字就緒並改变已就緒的套接字集合.

示例:
#+BEGIN_SRC c
  /* If you only have a couple dozen fds, this version won't be awful */
  fd_set readset;
  int i, n;
  char buf[1024];

  while (i_still_want_to_read()) {
      int maxfd = -1;
      FD_ZERO(&readset);

      /* Add all of the interesting fds to readset */
      for (i = 0; i < n_sockets; ++i) {
          if (fd[i] > maxfd)
              maxfd = fd[i];
          FD_SET(fd[i], &readset);
      }

      /* Wait until one or more fds are ready to read */
      select(maxfd+1, &readset, NULL, NULL, NULL);

      /* Process all of the fds that are still set in readset */
      for (i = 0; i < n_sockets; ++i) {
          if (FD_ISSET(fd[i], &readset)) {
              n = recv(fd[i], buf, sizeof(buf), 0);
              if (n == 0) {
                  handle_close(fd[i]);
              } else if (n < 0) {
                  if (errno == EAGAIN)
                      ; /* The kernel didn't have any data for us to read */
                  else
                      handle_error(fd[i], errno);
              } else {
                  handle_input(fd[i]);
              }
          }
      }
  }
#+END_SRC

这里是通过 select 实现的 ROT13 服务器：
#+BEGIN_SRC c
  /* Example: select()-based ROT13 server */

  /* For sockaddr_in */
  #include <netinet/in.h>
  /* For socket functions */
  #include <sys/socket.h>
  /* For fcntl */
  #include <fcntl.h>
  /* For select */
  #include <sys/select.h>

  #include <assert.h>
  #include <unistd.h>
  #include <string.h>
  #include <stdlib.h>
  #include <stdio.h>
  #include <errno.h>

  #define MAX_LINE 16384

  char rot13_char(char c)
  {
      /* We don't want to use isalpha here; setting the locale would change
       ,* which characters are considered alphabetical. */
      if ((c >= 'a' && c <= 'm') ||
          (c >= 'A' && c <= 'M'))
          return c + 13;
      else if ((c >= 'n' && c <= 'z') ||
               (c >= 'N' && c <= 'Z'))
          return c - 13;
      else
          return c;
  }

  struct fd_state {
      char buffer[MAX_LINE];
      size_t buffer_used;

      int writing;
      size_t n_written;
      size_t write_upto;
  };

  struct fd_state *alloc_fd_state(void)
  {
      struct fd_state *state = malloc(sizeof(struct fd_state));
      if (!state)
          return NULL;

      state->buffer_used = 0;
      state->n_written   = 0;
      state->write_upto  = 0;
      state->writing     = 0;

      return state;
  }

  void free_fd_state(struct fd_state *state)
  {
      free(state);
  }

  void make_nonblocking(int fd)
  {
      fcntl(fd, F_SETFL, O_NONBLOCK);
  }

  int do_read(int fd, struct fd_state *state)
  {
      char buf[1024];
      int i;
      ssize_t result;

      while (1) {
          result = recv(fd, buf, sizeof(buf), 0);
          if (result <= 0)
              break;

          for (i = 0; i < result; ++i) {
              if (state->buffer_used < sizeof(state->buffer))
                  state->buffer[state->buffer_used++] = rot13_char(buf[i]);
              if (buf[i] == '\n') {
                  state->writing = 1;
                  state->write_upto = state->buffer_used;
              }
          }
      }

      if (result == 0) {
          return 1;
      } else if (result < 0) {
          if (errno == EAGAIN)
              return 0;
          return -1;
      }

      return 0;

  }

  int do_write(int fd, struct fd_state *state)
  {
      while (state->n_written < state->write_upto) {
          ssize_t result = send(fd, state->buffer + state->n_written,
                                state->write_upto - state->n_written, 0);
          if (result < 0) {
              if (errno == EAGAIN)
                  return 0;
              return -1;
          }
          assert(result != 0);
          state->n_written += result;
      }

      if (state->n_written == state->buffer_used)
          state->n_written = state->write_upto = state->buffer_used = 0;
      state->writing = 0;

      return 0;
  }

  void run(void)
  {
      int listener;
      struct fd_state *state[FD_SETSIZE];
      struct sockaddr_in sin;
      int i, maxfd;
      fd_set readset, writeset, exset;

      sin.sin_family = AF_INET;
      sin.sin_addr.s_addr = 0;
      sin.sin_port = htons(40713);

      for (i = 0; i < FD_SETSIZE; ++i) {
          state[i] = NULL;
      }

      listener = socket(AF_INET, SOCK_STREAM, 0);
      make_nonblocking(listener);

      if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
          perror("bind");
          return;
      }

      if (listen(listener, 16) < 0) {
          perror("listen");
          return;
      }

      FD_ZERO(&readset);
      FD_ZERO(&writeset);
      FD_ZERO(&exset);

      while (1) {
          maxfd = listener;

          FD_ZERO(&readset);
          FD_ZERO(&writeset);
          FD_ZERO(&exset);

          FD_SET(listener, &readset);

          for (i = 0; i < FD_SETSIZE; ++i) {
              if (state[i]) {
                  if (i > maxfd)
                      maxfd = i;
                  FD_SET(i, &readset);
                  if (state[i]->writing) {
                      FD_SET(i, &writeset);
                  }
              }
          }

          if (select(maxfd + 1, &readset, &writeset, &exset, NULL) < 0) {
                  perror("select");
                  return;
          }

          if (FD_ISSET(listener, &readset)) {
              struct sockaddr_storage ss;
              socklen_t slen = sizeof(ss);
              int fd = accept(listener, (struct sockaddr *)&ss, &slen);
              if (fd < 0) {
                  perror("accept");
              } else if (fd > FD_SETSIZE) {
                  close(fd);
              } else {
                  make_nonblocking(fd);
                  state[fd] = alloc_fd_state();
              }
          }

          for (i = 0; i < maxfd + 1; ++i) {
              int r = 0;
              if (i == listener)
                  continue;

              if (FD_ISSET(i, &readset)) {
                  r = do_read(i, state[i]);
              }

              if (r == 0 && FD_ISSET(i, &writeset)) {
                  r = do_write(i, state[i]);
              }

              if (r) {
                  free_fd_state(state[i]);
                  state[i] = NULL;
                  close(i);
              }
          }
      }
  }

  int main(int c, char **v)
  {
      setvbuf(stdout, NULL, _IONBF, 0);

      run();

      return 0;
  }
#+END_SRC
（以上代码的处理注意缓冲区最大值是 16384，程序处理时如果读入的字符超过 16384 仍
没有读到换行符 '\n'，则会丢弃多余的字符，意味着回复给客户端的字符数最多为 16384
；如果读到 EOF 都没有读到 '\n'，则丢弃整个缓冲区。）

但我们仍然没有搞定. 由于生成和读取 select() 的 bit arrays 所花费的时间将与 maxfd
成正比, 因此当套接字数目很多时, select 调用的扩展性就变得很差.[fn:1]

不同的操作系统提供了对于 select 的不同替代方案。包括 poll(), epoll(), kqueue(),
evports, 以及 /dev/poll，所有这些都提供了比 select() 更好的性能，并且除了 poll()
之外都提供了 O(1) 的时间复杂度用于增加、删除套接字，以及当套接字 I/O 就绪时的通
知。

不幸的是，没有一个高效且通用的接口。Linux 有 epoll()，BSDs（包括 Darwin）有
kqueue()，Solaris 有 evports 和 /dev/poll... 但没有一个接口在这些操作系统间共用。
因此如果你想写一个可移植的高可用的异步应用，你将需要一个包装所有这些接口的封装，
并提供其中最有效的方式。

这就是 Libevent API 提供给你的底层功能：它提供了一致的接口，以替代 select() 的功
能，并根据不同的操作系统提供最高效的实现。

这里是关于异步服务器 ROT13 的另一个实现版本，使用了 Libevent 2 替换 select()。注
意 fd_sets 已经被结构体 event_base 所取代，用以关联和取消关联，背后是通过
select, poll, epoll, kqueue 等实现。 

以下是使用 Libevent 的例子：[fn:2]
#+BEGIN_SRC c
  /* Example: A low-level ROT13 server with Libevent */

  /* For sockaddr_in */
  #include <netinet/in.h>
  /* For socket functions */
  #include <sys/socket.h>
  /* For fcntl */
  #include <fcntl.h>

  #include <event2/event.h>

  #include <assert.h>
  #include <unistd.h>
  #include <string.h>
  #include <stdlib.h>
  #include <stdio.h>
  #include <errno.h>

  #define MAX_LINE 16384

  void do_read(evutil_socket_t fd, short events, void *arg);
  void do_write(evutil_socket_t fd, short events, void *arg);

  char rot13_char(char c)
  {
      if ((c >= 'a' && c <= 'm') ||
          (c >= 'A' && c <= 'M'))
          return c + 13;
      else if ((c >= 'n' && c <= 'z') ||
               (c >= 'N' && c <= 'Z'))
          return c - 13;
      else
          return c;
  }

  struct fd_state {
      char buffer[MAX_LINE];

      size_t buffer_used;
      size_t n_written;
      size_t write_upto;

      struct event *read_event;
      struct event *write_event;
  };

  struct fd_state *
  alloc_fd_state(struct event_base *base, evutil_socket_t fd)
  {
      struct fd_state *state = malloc(sizeof(struct fd_state));
      if (!state)
          return NULL;
      state->read_event = event_new(base,
                                    fd,
                                    EV_READ|EV_PERSIST,
                                    do_read,
                                    state);
      if (!state->read_event) {
          free(state);
          return NULL;
      }

      state->write_event = event_new(base,
                                     fd,
                                     EV_WRITE|EV_PERSIST,
                                     do_write,
                                     state);
      if (!state->write_event) {
          event_free(state->read_event);
          free(state);
          return NULL;
      }

      state->buffer_used = state->n_written = state->write_upto = 0;

      assert(state->write_event);
      return state;

  }

  void free_fd_state(struct fd_state *state)
  {
      event_free(state->read_event);
      /* event_free(state->write_event); */
      free(state);
  }

  void do_read(evutil_socket_t fd, short events, void *arg)
  {
      struct fd_state *state = arg;
      char buf[1024];
      int i;
      ssize_t result;

      while (1) {
          assert(state->write_event);
          result = recv(fd, buf, sizeof(buf), 0);
          if (result <= 0)
              break;

          for (i = 0; i < result; ++i) {
              if (state->buffer_used < sizeof(state->buffer))
                  state->buffer[state->buffer_used++] = rot13_char(buf[i]);
          }
      }

      if (result == 0) {
          /* We complete with read, delete the event and set write event to echo
             back to the sender */
          event_del(state->read_event);
          assert(state->write_event);
          event_add(state->write_event, NULL);
          state->write_upto = state->buffer_used;
      } else if (result < 0) {
          if (errno == EAGAIN)
              return;
          perror("recv");
          free_fd_state(state);
          close(fd);
      }
  }

  void
  do_write(evutil_socket_t fd, short events, void *arg)
  {
      struct fd_state *state = arg;

      while (state->n_written < state->write_upto) {
          ssize_t result = send(fd, state->buffer + state->n_written,
                                state->write_upto - state->n_written, 0);
          if (result < 0) {
              if (errno == EAGAIN)
                  return;
              free_fd_state(state);
              return;
          }
          assert(result != 0);

          state->n_written += result;
      }

      if (state->n_written == state->buffer_used)
          state->n_written = state->write_upto = state->buffer_used = 0;

      event_del(state->write_event);
      free_fd_state(state);
      close(fd);
  }

  void do_accept(evutil_socket_t listener, short event, void *arg)
  {
      struct event_base *base = arg;
      struct sockaddr_storage ss;
      socklen_t slen = sizeof(ss);

      int fd = accept(listener, (struct sockaddr *)&ss, &slen);
      if (fd < 0) {
          perror("accept");
      } else if (fd > FD_SETSIZE) {
          close(fd);
      } else {
          struct fd_state *state;
          evutil_make_socket_nonblocking(fd);
          state = alloc_fd_state(base, fd);
          assert(state);
          assert(state->write_event);
          event_add(state->read_event, NULL);
      }
  }

  void run(void)
  {
      evutil_socket_t listener;
      struct sockaddr_in sin;
      struct event_base *base;
      struct event *listener_event;

      base = event_base_new();
      if (!base)
          return;

      sin.sin_family = AF_INET;
      sin.sin_addr.s_addr = 0;
      sin.sin_port = htons(40713);

      listener = socket(AF_INET, SOCK_STREAM, 0);
      evutil_make_socket_nonblocking(listener);

      if (bind(listener, (struct sockaddr *)&sin, sizeof(sin)) < 0) {
          perror("bind");
          return;
      }

      if (listen(listener, 16) < 0) {
          perror("listen");
          return;
      }

      listener_event = event_new(base,
                                 listener,
                                 EV_READ|EV_PERSIST,
                                 do_accept,
                                 (void *)base);

      event_add(listener_event, NULL);
      event_base_dispatch(base);

      event_free(listener_event);
      event_base_free(base);
  }

  int main(int c, char **v)
  {
      setvbuf(stdout, NULL, _IONBF, 0);

      run();
      return 0;
  }
#+END_SRC
（关于以上代码：使用 =evutil_socket_t= 替代 =int= 表达套接字类型；通过
=evutil_make_socket_nonblocking= 代替 =fcntl(O_NONBLOCK)= 使得套接字非阻塞。这些
改变主要为了和 Win32 networking API 兼容）。

你可能会注意到我们的代码变得更有效率了，同时也变得更加复杂。回到 fork 模型，我们
并不需要为每一个连接管理一个缓冲区：我们只需要为每一个进程分配一个栈上缓冲区
（stack-allocated buffer）即可。我们也不需要明确地追踪每个套接字是否正在读写，并
且，我们也不需要一种数据结构来追踪每个操作完成了多少：我们只使用了循环和栈上变量。

此外，如果您对 Windows 上的网络编程具有深厚经验，您会意识到上面的 Libevent 示例
可能无法获得最佳性能。在 Windows 上，执行快速异步 I/O 的方法不是使用类似
select() 的接口，而是通过使用 IOCP（I/O 完成端口）API。与所有快速网络 API 不同，
当套接字已经准备好执行操作时，IOCP 并不会通知您的程序开始操作，而是，程序告诉
Windows 网络栈当套接字就绪时开始操作，当操作完成时，IOCP 通知程序。[fn:3]

幸运的是，Libevent 2 "bufferevents" 接口解决了这些问题：既使程序易于编写，同时接
口在 Windows 和 Unix 都提供了高效的实现。

最后，这是我们使用 bufferevents API 实现的 ROT13 服务器
#+BEGIN_SRC c
  /* For sockaddr_in */
  #include <netinet/in.h>
  /* For socket functions */
  #include <sys/socket.h>
  /* For fcntl */
  #include <fcntl.h>

  #include <event2/event.h>
  #include <event2/buffer.h>
  #include <event2/bufferevent.h>

  #include <assert.h>
  #include <unistd.h>
  #include <string.h>
  #include <stdlib.h>
  #include <stdio.h>
  #include <errno.h>

  #define MAX_LINE 16384

  void do_read(evutil_socket_t fd, short events, void *arg);
  void do_write(evutil_socket_t fd, short events, void *arg);

  char
  rot13_char(char c)
  {
      /* We don't want to use isalpha here; setting the locale would change
       ,* which characters are considered alphabetical. */
      if ((c >= 'a' && c <= 'm') || (c >= 'A' && c <= 'M'))
          return c + 13;
      else if ((c >= 'n' && c <= 'z') || (c >= 'N' && c <= 'Z'))
          return c - 13;
      else
          return c;
  }

  void
  readcb(struct bufferevent *bev, void *ctx)
  {
      struct evbuffer *input, *output;
      char *line;
      size_t n;
      int i;
      input = bufferevent_get_input(bev);
      output = bufferevent_get_output(bev);
    
  }
#+END_SRC

* Reactor 模式

* Footnotes

[fn:3] 有两种触发模式：1）水平触发（LT），需要在事件触发后主动完成I/O，并向上层
代码直接提供 buffer；2）边缘触发（ET），可选择只管理事件通知，由上层代码完成 I/O
并管理 buffer。水平触发的时效性更好，但底层主动 I/O 和上层代码并发操作 buffer，
会引起额外的并发开销。

[fn:2] 官方教程的 [[https://github.com/nmathewson/libevent-book/blob/master/examples_01/01_rot13_server_libevent.c][sample 代码]]有误，在 echo back 之后没有关闭套接字，参考[[https://gist.github.com/ajhwb/3685796][这里]]修正
了。

[fn:1] 从用户空间来说，生产和读取位组的时间与提供给 select() 的 fds 成正比，但是
在内核方面，读取位组花费的时间和位组中最大的 fd 成正比，而该 fd 往往接近整个程序
使用的 fds 总数，无论有多少 fds 添加到 select() 中。

